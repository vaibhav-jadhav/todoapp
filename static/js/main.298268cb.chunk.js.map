{"version":3,"sources":["UI/TodoCard.js","UI/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","tatrastyele","color","border","fontSize","resize","toDoData","noteValue","a","console","log","method","url","_id","headers","data","note","title","finished","then","response","catch","error","TodoCard","props","useState","iseditable","setEditable","setNote","noValidate","autoComplete","style","disabled","onChange","event","target","value","Button","margin","onClick","variant","visible","updateTodo","Home","get","prevData","parentState","dataState","UpdateRect","Loaded","isLoaded","LoadData","Container","fluid","display","justifyContent","paddingLeft","paddingRight","Row","marginLeft","marginRight","record","map","item","index","Col","className","lg","md","sm","key","type","height","width","timeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.298268cb.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport './index.css';\nimport Button from '@material-ui/core/Button';\nconst axios = require('axios');\nconst tatrastyele={\n    color:\"red\",\n    border:\"none\",\n    fontSize:\"25px\",\n    resize:\"none\",\n}\n async function updateTodo(toDoData,noteValue){\n     console.log(toDoData,noteValue)\n      await axios({\n         method: 'post',\n         url: \"https://todonotesapp.herokuapp.com/update/\"+toDoData._id,\n         headers: {\n            'Content-Type': 'application/json',\n         }, \n         data: {\n                    note : \"\"+noteValue,\n                    // title:\"note is \"+toDoData._id,\n                    title: \"demo title\",\n                    finished: true,\n                } \n       }).then((response) => {\n        console.log(\"RES\",response)\n      })\n      .catch((error) => {\n        \n      })\n}\n\nfunction TodoCard(props){\n    const [iseditable,setEditable]=useState(false);\n    const [noteValue,setNote]=useState(props.data.note);\n    function handleChange(event ){\n        // console.log(\"handle\",event.target.value)\n        setNote(event.target.value);\n    }\n    // console.log(\"data \",props.data)\n    return(\n        <div >\n            <h2>{props.data.title}</h2> \n            <form  noValidate autoComplete=\"off\">\n                <textarea style={tatrastyele}  disabled={!iseditable} onChange={handleChange}>\n                {props.data.note}\n                    </textarea>\n            </form>\n            <Button style={{margin:\"10px\"}} onClick={()=>{setEditable(true)}} variant=\"contained\" color=\"primary\">Edit</Button>\n           { !iseditable ? null : <Button visible={false} onClick={()=>{setEditable(false); updateTodo(props.data,noteValue) }} variant=\"contained\" color=\"primary\">Save</Button> }\n        \n      </div>\n    );\n}\nexport default TodoCard;","import React from 'react';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport TodoCard from './TodoCard';import './index.css'\nimport {Container} from 'reactstrap';\n\nimport {Row} from 'reactstrap';\nimport {Col} from 'reactstrap';\n// import Example from './Example'\nconst axios = require('axios');\n\n\n// let onceLoaded=false;\nfunction Home(props){\n    console.log(props.prevData.parentState.isLoaded)\n    // const [isLoaded, Loaded] = useState(false);\n    async function LoadData(){\n        await   axios.get('https://todonotesapp.herokuapp.com/getall')\n        .then(function (response) {\n        //   console.log(response.data);\n          props.prevData.parentState.dataState.UpdateRect(response.data);\n          props.prevData.parentState.Loaded(true);\n        //   onceLoaded=true;\n        //   data = response;\n        }).catch(function (error) {\n          console.log(error);\n        }).then(function () {\n        });\n    }\n    if(!props.prevData.parentState.isLoaded)\n        LoadData(); \n    return(\n        \n        ( props.prevData.parentState.isLoaded)  ?\n        <Container fluid style={{display:\"flex\", justifyContent:\"center\", paddingLeft: 0, paddingRight: 0 }}>\n                {/* <Example></Example> */}\n            <Row style={{ marginLeft: 0, marginRight: 0 }}>\n                { \n                props.prevData.parentState.dataState.record.map((item,index)=>{\n                        return <Col className=\"todsad\" lg=\"2\" md=\"5\" sm=\"10\" key ={index}>\n                            < TodoCard data={item}/>\n                            </Col> })\n                }\n            </Row>\n        </Container>   \n        :\n        <Loader\n         type=\"ThreeDots\"\n         color=\"blue\"\n         height={500}\n         width={100}\n         timeout={10000} //3 secs\n \n      />\n    \n    );\n}\nexport default Home;","import React, { useState } from 'react';\nimport './App.css';\nimport Home from './UI/Home'\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\nfunction App() {\n  const [isLoaded, Loaded] = useState(false);\n  const [record, UpdateRect] = useState({});\n  return (\n    <div className=\"App\"  style={{display:\"flex\", justifyContent:\"center\"}}>\n      <Home  prevData={{parentState : {isLoaded,Loaded,dataState : {record, UpdateRect}}}}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}