{"version":3,"sources":["UI/TodoCard.js","UI/SearchBar.js","UI/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","tatrastyele","color","border","fontSize","resize","toDoData","noteValue","a","method","url","_id","headers","data","note","title","then","response","catch","error","window","location","reload","TodoCard","props","useState","iseditable","setEditable","setNote","noValidate","autoComplete","style","disabled","onChange","event","target","value","Button","margin","onClick","variant","visible","updateTodo","deleteTodo","addstyle","display","justifyContent","flexDirection","paddingTop","alignItems","barstyle","padding","marginTop","addNote","notetitle","notetext","console","log","SearchBar","setNoteTitle","placeholder","backgroundColor","height","width","Home","get","prevData","parentState","dataState","UpdateRect","reverse","Loaded","isLoaded","LoadData","className","marginLeft","marginRight","record","map","item","index","key","type","timeout","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e4d6cc3b.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport './index.css';\nimport Button from '@material-ui/core/Button';\nconst axios = require('axios');\nconst tatrastyele={\n    color:\"red\",\n    border:\"none\",\n    fontSize:\"25px\",\n    resize:\"none\",\n}\n async function updateTodo(toDoData,noteValue){\n    //  console.log(toDoData,noteValue)\n      await axios({\n         method: 'post',\n         url: \"https://todonotesapp.herokuapp.com/update/\"+toDoData._id,\n         headers: {\n            'Content-Type': 'application/json',\n         }, \n         data: {\n                    note : \"\"+noteValue,\n                    title: \"demo title\",\n                    // finished: true,\n                } \n       }).then((response) => {\n        // console.log(\"RES\",response)\n      })\n      .catch((error) => {\n        \n      })\n}\nasync function deleteTodo(toDoData){\n    // console.log(toDoData,noteValue)\n     await axios({\n        method: 'delete',\n        url: \"https://todonotesapp.herokuapp.com/delete/\"+toDoData._id,\n        headers: {\n           'Content-Type': 'application/json',\n        }, \n        data: {} \n      }).then((response) => {\n    //    console.log(\"RES\",response)\n    window.location.reload();\n     })\n     .catch((error) => {\n       \n     })\n}\n\nfunction TodoCard(props){\n    const [iseditable,setEditable]=useState(false);\n    const [noteValue,setNote]=useState(props.data.note);\n    function handleChange(event ){\n        // console.log(\"handle\",event.target.value)\n        setNote(event.target.value);\n    }\n    // console.log(\"data \",props.data)\n    return(\n        <div >\n            <h2>{props.data.title}</h2> \n            <form  noValidate autoComplete=\"off\">\n                <textarea style={tatrastyele}  disabled={!iseditable} onChange={handleChange}>\n                {props.data.note}\n                    </textarea>\n            </form>\n            <Button style={{margin:\"10px\"}} onClick={()=>{setEditable(!iseditable)}} variant=\"contained\" color=\"primary\">Edit</Button>\n           { !iseditable ? null : <Button visible={false} onClick={()=>{setEditable(false); updateTodo(props.data,noteValue) }} variant=\"contained\" color=\"primary\">Save</Button> }\n           <Button style={{margin:\"10px\"}} onClick={()=>{deleteTodo(props.data)}} variant=\"contained\" color=\"primary\">delete</Button>\n      </div>\n    );\n}\nexport default TodoCard;","import React,{useState} from 'react';\nimport { Button } from '@material-ui/core';\nimport axios from 'axios';\nconst addstyle={\n       \n    display:\"flex\", \n    justifyContent:\"center\",\n    flexDirection:\"column\",\n    margin:\"30px\",\n    paddingTop:\"20px\",\n    // alignContent:\"center\"\n    alignItems:\"center\"\n\n}\nconst barstyle={\n    fontSize:\"25px\",\n    padding:\"5px\",\n    marginTop:\"10px\"\n\n}\nconst addNote=async(notetitle,notetext)=>{\n        // console.log(notetitle,notetext)\n        await axios({\n            method: 'post',\n            url: \"https://todonotesapp.herokuapp.com/add\",\n            headers: {\n               'Content-Type': 'application/json',\n            }, \n            data: {\n                       title : \"\"+notetitle,\n                      note : \"\"+notetext\n                   } \n          }).then((response) => {\n           console.log(\"RES\",response);\n           window.location.reload();\n         })\n         .catch((error) => {\n           \n         })\n}\nconst SearchBar = ()=>{\n    const [notetext,setNote]=useState(\"\")\n    const [notetitle,setNoteTitle]=useState(\"\")\n    const handleChange=(event)=>{\n        setNoteTitle(event.target.value)\n        // console.log(notetitle)\n    }\n    const handleChange2=(event)=>{\n       setNote(event.target.value)\n    //    console.log(notetext )\n    }\n    return(<>\n        <div >\n                     <div style={addstyle} noValidate autoComplete=\"off\">\n                        <input onChange={handleChange} style={barstyle} placeholder=\"title of the note\"></input>\n                        <input onChange={handleChange2} style={barstyle} placeholder=\"note\"></input>\n                        <Button onClick={()=>{addNote(notetitle,notetext)}} style={{backgroundColor:\" rgb(138, 214, 150)\", fontSize:\"25px\",height: \"50px\",width:\"200px\",marginTop:\"10px\"}}>SAVE</Button>\n                     </div>\n            </div>\n    </>);\n}\nexport default SearchBar;","import React from 'react';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport TodoCard from './TodoCard';import './index.css'\nimport SearchBar from './SearchBar'\n// import Example from './Example'\nconst axios = require('axios');\n\n\n// let onceLoaded=false;\nfunction Home(props){\n    // console.log(props.prevData.parentState.isLoaded)\n    // const [isLoaded, Loaded] = useState(false);\n    async function LoadData(){\n        await   axios.get('https://todonotesapp.herokuapp.com/getall')\n        .then(function (response) {\n        //   console.log(response.data);\n          props.prevData.parentState.dataState.UpdateRect(response.data.reverse());\n          props.prevData.parentState.Loaded(true);\n        //   onceLoaded=true;\n        //   data = response;\n        }).catch(function (error) {\n          console.log(error);\n        }).then(function () {\n        });\n    }\n    if(!props.prevData.parentState.isLoaded)\n        LoadData(); \n    \n    return(\n        \n        ( props.prevData.parentState.isLoaded)  ?\n        <div>\n            <SearchBar/>\n        <div>\n                <div className=\"op\"  style={{ marginLeft: 0, marginRight: 0 }}>\n                    { \n                    // lg=\"2\" md=\"5\" sm=\"10\"\n                    props.prevData.parentState.dataState.record.map((item,index)=>{\n                            return <div className=\"todsad\"  key ={index}>\n                                < TodoCard data={item}/>\n                                </div> })\n                    }\n                </div>\n        </div> \n        </div>  \n        :\n        <Loader\n         type=\"ThreeDots\"\n         color=\"blue\"\n         height={500}\n         width={100}\n         timeout={10000} //3 secs\n \n      />\n    \n    );\n}\nexport default Home;","import React, { useState } from 'react';\nimport './App.css';\nimport Home from './UI/Home'\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\nfunction App() {\n  const [isLoaded, Loaded] = useState(false);\n  const [record, UpdateRect] = useState({});\n  return (\n    <div className=\"App\" >\n      <Home  prevData={{parentState : {isLoaded,Loaded,dataState : {record, UpdateRect}}}}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}