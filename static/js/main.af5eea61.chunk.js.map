{"version":3,"sources":["UI/TodoCard.js","UI/SearchBar.js","UI/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","tatrastyele","color","border","fontSize","resize","TodoCard","props","useState","iseditable","setEditable","data","note","noteValue","setNote","toDoData","a","user","email","alert","method","url","_id","headers","then","response","catch","error","console","log","window","location","reload","stt","stt2","title","noValidate","autoComplete","style","disabled","onChange","event","target","value","Button","margin","onClick","variant","visible","updateTodo","deleteTodo","options","defaultOption","currentOption","addstyle","display","justifyContent","flexDirection","paddingTop","alignItems","barstyle","padding","marginTop","addNote","notetitle","notetext","mail","access","SearchBar","setNoteTitle","Grid","align","Avatar","src","imageUrl","height","width","name","clientId","buttonText","onLogoutSuccess","placeholder","backgroundColor","Home","reFetch","ForceRefetch","get","prevData","userInfo","parentState","dataState","UpdateRect","reverse","Loaded","isLoaded","LoadData","className","marginLeft","marginRight","record","map","item","index","key","type","timeout","paperStyle","App","userData","upDateUser","logger","Uplogger","Paper","elevation","marginBottom","onSuccess","profileObj","onFailure","cookiePolicy","isSignedIn","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.af5eea61.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport './index.css';\nimport Button from '@material-ui/core/Button';\nconst axios = require('axios');\nconst tatrastyele={\n    color:\"red\",\n    border:\"none\",\n    fontSize:\"25px\",\n    resize:\"none\",\n}\n\nfunction TodoCard(props){\n    const [iseditable,setEditable]=useState(false);\n    const [noteValue,setNote]=useState(props.data.note);\n    console.log(\"GG\",props.user)\n    console.log(\"GG\",props.data)\n async function updateTodo(toDoData,noteValue){\n    //  console.log(toDoData,noteValue)\n    if(props.user.email !== props.data.user){\n        alert(\"Its not you note !!\")\n        return\n    }\n      await axios({\n         method: 'post',\n         \n        //  url: \"http://localhost:3030/update/\"+toDoData._id,\n         url: \"https://todonotesapp.herokuapp.com/update/\"+toDoData._id,\n         headers: {\n            'Content-Type': 'application/json',\n         }, \n         data: {\n                    note : \"\"+noteValue,\n                    // title: \"demo title\",\n                    // finished: true,\n                } \n       }).then((response) => {\n        // console.log(\"RES\",response)\n      })\n      .catch((error) => {\n        \n      })\n}\nasync function deleteTodo(toDoData){\n    // console.log(toDoData,noteValue)\n    if(props.user.email !== props.data.user){\n        alert(\"Its not you note !!\")\n        return\n    }\n     await axios({\n        method: 'delete',\n        // http://localhost:3030/\n        // url: \"http://localhost:3030/delete/\"+toDoData._id,\n        url: \"https://todonotesapp.herokuapp.com/delete/\"+toDoData._id,\n        headers: {\n           'Content-Type': 'application/json',\n        }, \n        data: {} \n      }).then((response) => {\n       console.log(\"RES\",response)\n    window.location.reload();\n    props.stt(!props.stt2);\n\n     })\n     .catch((error) => {\n       \n     })\n}\n    function handleChange(event ){\n        // console.log(\"handle\",event.target.value)\n        setNote(event.target.value);\n    }\n\n    // console.log(\"data \",props.data)\n    return(\n        <div >\n            <h2>{props.data.title}</h2> \n            <form  noValidate autoComplete=\"off\">\n                <textarea style={tatrastyele}  disabled={!iseditable} onChange={handleChange}>\n                {props.data.note}\n                    </textarea>\n            </form>\n            <Button style={{margin:\"10px\"}} onClick={()=>{setEditable(!iseditable)}} variant=\"contained\" color=\"primary\">Edit</Button>\n           { !iseditable ? null : <Button visible={false} onClick={()=>{setEditable(false); updateTodo(props.data,noteValue) }} variant=\"contained\" color=\"primary\">Save</Button> }\n           <Button style={{margin:\"10px\"}} onClick={()=>{deleteTodo(props.data)}} variant=\"contained\" color=\"primary\">delete</Button>\n      </div>\n    );\n}\nexport default TodoCard;","import React,{useState} from 'react';\n// import { Button } from '@material-ui/core';\nimport axios from 'axios';\nimport { GoogleLogout } from 'react-google-login';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport {Grid,Paper,Avatar, TextField, Button, Typography,Link} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nconst options = [\n    'private', 'public'\n  ];\nconst defaultOption = options[0];\nlet currentOption=defaultOption;\nconst addstyle={\n       \n    display:\"flex\", \n    justifyContent:\"center\",\n    flexDirection:\"column\",\n    margin:\"30px\",\n    paddingTop:\"0px\",\n    // alignContent:\"center\"\n    alignItems:\"center\"\n\n}\nconst barstyle={\n    fontSize:\"25px\",\n    padding:\"5px\",\n    marginTop:\"10px\"\n\n}\nconst addNote=async(notetitle,notetext,mail)=>{\n        // console.log(notetitle,notetext)\n        await axios({\n            method: 'post',\n            url: \"https://todonotesapp.herokuapp.com/add\",\n            // url: \"http://localhost:3030/add\",\n            headers: {\n               'Content-Type': 'application/json',\n            }, \n            data: {\n                       title : \"\"+notetitle,\n                      note : \"\"+notetext,\n                      user:\"\"+mail,\n                      access:\"\"+currentOption\n                   } \n          }).then((response) => {\n           console.log(\"RES\",response);\n           window.location.reload();\n         })\n         .catch((error) => {\n           \n         })\n}\nconst SearchBar = (props)=>{\n    console.log(\"FROM SEARCH\",props.user.email)\n    const [notetext,setNote]=useState(\"\")\n    const [notetitle,setNoteTitle]=useState(\"\")\n    const handleChange=(event)=>{\n        setNoteTitle(event.target.value)\n        // console.log(notetitle)\n    }\n    const handleChange2=(event)=>{\n       setNote(event.target.value)\n    //    console.log(notetext )\n    }\n    const onSelect=(event)=>{\n        console.log(event.value)\n        currentOption=event.value;\n    }\n    return(<>\n        <Grid >   \n        <div>  \n            <Grid align=\"center\">\n               \n            <Grid align=\"center\">\n            <Avatar src={props.user.imageUrl} style={{marginTop:\"20px\",height:\"60px\",width:\"60px\"}}>\n                                    \n                            </Avatar>\n            </Grid>\n            <Grid align=\"center\">\n                            <h3>Hey...</h3>\n                            <h3>{props.user.name}</h3>\n                            <GoogleLogout\n                        clientId=\"1020269995642-2dcp725j8juks8bfifq5gm0cvp9obq99.apps.googleusercontent.com\"\n                        buttonText=\"Logout\"\n                        onLogoutSuccess={()=>{ window.location.reload();\n                        }}>\n                </GoogleLogout>\n            </Grid>\n            \n            <Grid style={addstyle} noValidate autoComplete=\"off\">\n                        <input onChange={handleChange} style={barstyle} placeholder=\"title of the note\"></input>\n                        <input onChange={handleChange2} style={barstyle} placeholder=\"note\"></input>\n                        <Dropdown options={options} onChange={onSelect} value={defaultOption} placeholder=\"Select an option\" />;\n                        <Button onClick={()=>{addNote(notetitle,notetext,props.user.email)}} style={{backgroundColor:\" rgb(138, 214, 150)\", fontSize:\"25px\",height: \"50px\",width:\"200px\",marginTop:\"10px\"}}>SAVE</Button>\n                     </Grid>\n                     </Grid>\n                     </div>\n      </Grid>\n    </>);\n}\nexport default SearchBar;","import React,{useState} from 'react';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\nimport TodoCard from './TodoCard';import './index.css'\nimport SearchBar from './SearchBar'\n// import Example from './Example'\nconst axios = require('axios');\n\n\n// let onceLoaded=false;\nfunction Home(props){\n    // console.log(props.prevData.userInfo)\n    // console.log(props.prevData.parentState.isLoaded)\n    // const [isLoaded, Loaded] = useState(false);\n    const [reFetch,ForceRefetch]=useState(false);\n    async function LoadData(){\n        // http://localhost:3030/\n        // props.prevData.userInfo.email\n        // console.error(props.prevData.userInfo.email)\n        // await   axios.get('http://localhost:3030/getall?mail='+props.prevData.userInfo.email)\n        await   axios.get('https://todonotesapp.herokuapp.com/getall?mail='+props.prevData.userInfo.email)\n        .then(function (response) {\n          props.prevData.parentState.dataState.UpdateRect(response.data.reverse());\n          props.prevData.parentState.Loaded(true);\n        }).catch(function (error) {\n          console.log(error);\n        }).then(function () {\n        });\n    }\n    if(!props.prevData.parentState.isLoaded)\n        LoadData(); \n    return(\n        \n        ( props.prevData.parentState.isLoaded)  ?\n        <div>\n            <SearchBar user={props.prevData.userInfo}/>\n        <div>\n                <div className=\"op\"  style={{ marginLeft: 0, marginRight: 0 }}>\n                    { \n                    props.prevData.parentState.dataState.record.map((item,index)=>{\n                            return <div className=\"todsad\"  key ={index}>\n                                < TodoCard user={props.prevData.userInfo} stt2={reFetch} stt={ForceRefetch} data={item}/>\n                                </div> })\n                    }\n                </div>\n        </div> \n        </div>  \n        :\n        <Loader\n         type=\"ThreeDots\"\n         color=\"blue\"\n         height={500}\n         width={100}\n         timeout={10000} //3 secs\n \n      />\n    \n    );\n}\nexport default Home;","import React, { useState } from 'react';\nimport './App.css';\nimport Home from './UI/Home'\nimport { GoogleLogin } from 'react-google-login';\nimport {Grid,Paper,Avatar, TextField, Button, Typography,Link} from '@material-ui/core';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n// import Container from 'react-bootstrap/Container';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\nconst paperStyle={\n  padding:20,\n  width : 280,\n  margin : \"15vh auto \"\n\n}\nfunction App() {\n  const [isLoaded, Loaded] = useState(false);\n  const [record, UpdateRect] = useState({});\n  const [userData,upDateUser]=useState();\n  const [logger,Uplogger]=useState(false)\n  return (\n    <div className=\"App\" >\n     {\n       logger?\n       <Home  prevData={{userInfo:userData, parentState : {isLoaded,Loaded,dataState : {record, UpdateRect}}}}/>:\n       \n       <Grid>\n         <Paper  elevation={10}  style={paperStyle}>\n           <Grid align=\"center\">\n            <h3>\n              Sign In to..\n            </h3>\n            <h1>\n              Todo app\n            </h1>\n            <h4>\n            Log in to play with yout Toto Notes.\n            </h4>\n            <h5>\n              we don't share your account details with anyone.\n            </h5>\n           </Grid>\n         <Grid style={{marginTop:\"50px\",marginBottom:\"20px\"}}>\n                <GoogleLogin\n                      \n                      clientId=\"1020269995642-2dcp725j8juks8bfifq5gm0cvp9obq99.apps.googleusercontent.com\"\n                      buttonText=\"Login\"\n                      onSuccess={(data)=>{\n                          console.log(\"Auth data\",data);\n                          upDateUser(data.profileObj);\n                          Uplogger(true);    \n                      }}\n                      onFailure={(data)=>{\n                        console.log(\"Auth data\",data)\n                    }}\n                      cookiePolicy={'single_host_origin'}\n                      isSignedIn={true}\n                    />\n         </Grid>\n         <h5>\n           *All private notes are editable to respective users.\n         </h5>\n         <h5>\n         *All public notes are Read-only.\n         </h5>\n         </Paper>\n       </Grid>\n            \n     }\n     \n     \n     \n      {/* <Home  prevData={{parentState : {isLoaded,Loaded,dataState : {record, UpdateRect}}}}/> */}\n    </div>\n  );\n}\n\nexport default App;\n// 1020269995642-2dcp725j8juks8bfifq5gm0cvp9obq99.apps.googleusercontent.com\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}